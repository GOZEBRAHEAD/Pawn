/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <engine>
#include <fakemeta>
#include <hamsandwich>

new const PLUGIN[] = "Super Sayayin"
new const VERSION[] = "#1.0"
new const AUTHOR[] = "ZEBRAHEAD"

const UNIT_SECOND = (1 << 12)
const TASK_CHISPAS = 1984

new g_sprite_beam, sprite_rayo, g_conteo, g_conteo2, g_fade, g_shake, g_maxplayers, g_cam[33]

public plugin_precache()
{
	precache_model("models/rpgrocket.mdl")
	g_sprite_beam = precache_model("sprites/laserbeam.spr")
	sprite_rayo = engfunc(EngFunc_PrecacheModel, "sprites/super_sayan_aura2.spr")
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_maxplayers = get_maxplayers();
	g_fade = get_user_msgid("ScreenFade");
	g_shake = get_user_msgid("ScreenShake");
	
	register_clcmd("say /testeo", "cmd_super");
	
	RegisterHam(Ham_Spawn, "player", "Ham_PlayerSpawn", 1);
}

public client_putinserver(id)	g_cam[id] = false

public client_disconnect(id)	remove_task(id + TASK_CHISPAS)

public cmd_super(id)
{
	if (!is_user_connected(id))	return 1;
	
	g_cam[id] = !(g_cam[id]);
	(g_cam[id]) ? set_view(id, CAMERA_3RDPERSON) : set_view(id, CAMERA_NONE)
	
	g_conteo = 1
	
	set_task(1.0, "chispas", id + TASK_CHISPAS)
	
	return 1;
}

public chispas(id)
{
	id -= TASK_CHISPAS
	if (!is_user_connected(id))	return;
	
	if (g_conteo < 10)
	{
		g_conteo++
		
		new origin[3];get_user_origin(id, origin, 1)
		
		// Chispas #1
		message_begin(MSG_PVS, SVC_TEMPENTITY, origin)
		write_byte(TE_IMPLOSION) // TE id
		write_coord(origin[0]) // x
		write_coord(origin[1]) // y
		write_coord(origin[2]) // z
		write_byte(150) // radius
		write_byte(35) // count
		write_byte(3) // duration
		message_end()
		
		// Efecto #1
		message_begin( MSG_BROADCAST, SVC_TEMPENTITY );
		write_byte(TE_BEAMDISK)
		write_coord( origin[0] ); // Start X
		write_coord( origin[1] ); // Start Y
		write_coord( origin[2] - 40); // Start Z
		write_coord( origin[0] ); // End X
		write_coord( origin[1] ); // End Y
		write_coord( origin[2] - 350); // End Z 850
		write_short(g_sprite_beam) // Sprite
		write_byte(0) // starting frame
		write_byte(0) // frame rate
		write_byte(5) // life
		write_byte(3) // life width
		write_byte(100) // noise amplitude
		write_byte(255) // r
		write_byte(255) // g
		write_byte(42) // b
		write_byte(75) // brightness
		write_byte(0) // scroll speed
		message_end()
		
		set_task(1.5, "chispas", id + TASK_CHISPAS)
	}
	else
	{
		g_conteo2 = 1
		
		// Mandamos los Rayos
		efecto_rayo(id)
	}
}

public efecto_rayo(id)
{
	if (g_conteo2 < 10)
	{
		g_conteo2++
		
		new vec1[3], vec2[3];get_user_origin(id, vec2)
	
		vec2[2] -= 26;vec1[0] = vec2[0];vec1[1] = vec2[1];vec1[2] = vec2[2] + 400
	
		//Lightning
		message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
		write_byte( 0 )
		write_coord(vec1[0])
		write_coord(vec1[1]+30)
		write_coord(vec1[2])
		write_coord(vec2[0])
		write_coord(vec2[1]+30)
		write_coord(vec2[2])
		write_short( sprite_rayo )
		write_byte( 1 ) // framestart
		write_byte( 5 ) // framerate
		write_byte( 4 ) // life
		write_byte( 60 ) // width
		write_byte( 80 ) // noise
		write_byte( 255 ) // r, g, b
		write_byte( 255 ) // r, g, b
		write_byte( 0 ) // r, g, b
		write_byte( 255 ) // brightnes
		write_byte( 200 ) // speed
		message_end()
		
		//Lightning
		message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
		write_byte( 0 )
		write_coord(vec1[0])
		write_coord(vec1[1]-30)
		write_coord(vec1[2])
		write_coord(vec2[0])
		write_coord(vec2[1]-30)
		write_coord(vec2[2])
		write_short( sprite_rayo )
		write_byte( 1 ) // framestart
		write_byte( 5 ) // framerate
		write_byte( 4 ) // life
		write_byte( 60 ) // width
		write_byte( 80 ) // noise
		write_byte( 255 ) // r, g, b
		write_byte( 255 ) // r, g, b
		write_byte( 0 ) // r, g, b
		write_byte( 255 ) // brightnes
		write_byte( 200 ) // speed
		message_end()
		
		//Lightning
		message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
		write_byte( 0 )
		write_coord(vec1[0]-30)
		write_coord(vec1[1])
		write_coord(vec1[2])
		write_coord(vec2[0]-30)
		write_coord(vec2[1])
		write_coord(vec2[2])
		write_short( sprite_rayo )
		write_byte( 1 ) // framestart
		write_byte( 5 ) // framerate
		write_byte( 4 ) // life
		write_byte( 60 ) // width
		write_byte( 80 ) // noise
		write_byte( 255 ) // r, g, b
		write_byte( 255 ) // r, g, b
		write_byte( 0 ) // r, g, b
		write_byte( 255 ) // brightnes
		write_byte( 200 ) // speed
		message_end()
		
		//Lightning
		message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
		write_byte( 0 )
		write_coord(vec1[0]+30)
		write_coord(vec1[1])
		write_coord(vec1[2])
		write_coord(vec2[0]+30)
		write_coord(vec2[1])
		write_coord(vec2[2])
		write_short( sprite_rayo )
		write_byte( 1 ) // framestart
		write_byte( 5 ) // framerate
		write_byte( 4 ) // life
		write_byte( 60 ) // width
		write_byte( 80 ) // noise
		write_byte( 255 ) // r, g, b
		write_byte( 255 ) // r, g, b
		write_byte( 0 ) // r, g, b
		write_byte( 255 ) // brightnes
		write_byte( 200 ) // speed
		message_end()
		
		set_task(1.0, "efecto_rayo", id)
	}
	else
	{
		// Mandamos un mega efecto de aura
		efecto_aura(id)
	}
}

public efecto_aura(id)
{
	if (!is_user_connected(id))	return;
	
	new vec1[3], vec2[3];get_user_origin(id, vec2)
	
	vec2[2] -= 26;vec1[0] = vec2[0];vec1[1] = vec2[1];vec1[2] = vec2[2] + 400
	
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte( 0 )
	write_coord(vec1[0]+30)
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_coord(vec2[0]+30)
	write_coord(vec2[1])
	write_coord(vec2[2])
	write_short( sprite_rayo )
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( 4 ) // life
	write_byte( 100 ) // width
	write_byte( 80 ) // noise
	write_byte( 255 ) // r, g, b
	write_byte( 0 ) // r, g, b
	write_byte( 0 ) // r, g, b
	write_byte( 255 ) // brightnes
	write_byte( 200 ) // speed
	message_end()
	
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte( 0 )
	write_coord(vec1[0]-30)
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_coord(vec2[0]-30)
	write_coord(vec2[1])
	write_coord(vec2[2])
	write_short( sprite_rayo )
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( 8 ) // life
	write_byte( 250 ) // width
	write_byte( 80 ) // noise
	write_byte( 255 ) // r, g, b
	write_byte( 0 ) // r, g, b
	write_byte( 0 ) // r, g, b
	write_byte( 255 ) // brightnes
	write_byte( 100 ) // speed
	message_end()
	
	
	new origin[3];get_user_origin(id, origin, 1)
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY );
	write_byte(TE_BEAMDISK)
	write_coord( origin[0] ); // Start X
	write_coord( origin[1] ); // Start Y
	write_coord( origin[2] - 40); // Start Z
	write_coord( origin[0] ); // End X
	write_coord( origin[1] ); // End Y
	write_coord( origin[2] - 350); // End Z 850
	write_short(g_sprite_beam) // Sprite
	write_byte(0) // starting frame
	write_byte(0) // frame rate
	write_byte(6) // life
	write_byte(50) // life width
	write_byte(150) // noise amplitude
	write_byte(255) // r
	write_byte(0) // g
	write_byte(0) // b
	write_byte(150) // brightness
	write_byte(0) // scroll speed
	message_end()
	
	message_begin(MSG_ONE_UNRELIABLE, g_fade, _, id)
	write_short((1<<12))
	write_short(0)
	write_short(0x0000)
	write_byte(255)
	write_byte(0)
	write_byte(0)
	write_byte(200)
	message_end()
	
	glow(id)
	
	static i;
	for (i = 1; i <= g_maxplayers; i++)
	{
		if (!is_user_alive(i))	continue;
		
		message_begin(MSG_ONE_UNRELIABLE, g_shake, _, i);
		write_short(UNIT_SECOND * 14);
		write_short(UNIT_SECOND * 9);
		write_short(UNIT_SECOND * 14);
		message_end();
	}
}

public glow(id)
{
	if (!is_user_connected(id))	return;
	
	set_rendering(id, kRenderFxGlowShell, 200, 200, 42, kRenderNormal, 30)
}

public Ham_PlayerSpawn(id)
{
	if (!is_user_connected(id))	return;
	
	// No tiene GLOW
	set_rendering(id)
}
